1.	library IEEE;
2.	use IEEE.std_logic_1164.all;
3.	use IEEE.std_logic_unsigned.all;
4.	use work.HeMPS_defaults.all;
5.	use work.HemPS_PKG.all;
6.	
7.	entity Bus_BridgeRR is
8.		port(
9.		clock        : in std_logic;
10.		reset        : in std_logic;
11.		-- DMNI INTERFACE
12.		rx           : in std_logic;
13.		data_in      : in regflit;
14.		credit_o     : out std_logic;
15.		-- BUS INTERFACE
16.		data_out     : out regflit;
17.		credit_i     : in std_logic;
18.		tx           : out std_logic;
19.		tx_addr      : out regflit;
20.		--source_addr  : out regmetadeflit;
21.		-- BUS CTRL Signals
22.		ack          : out std_logic;
23.		request      : out std_logic;
24.		grant        : in std_logic;
25.		using_bus     : out std_logic;
26.		tx_change_flit : out std_logic
27.	);
28.	end Bus_BridgeRR;
29.	
30.	architecture Bus_BridgeRR of Bus_BridgeRR is
31.	
32.	signal data_av, data_ack: std_logic := '0';
33.	type fila_out is (S_INIT, S_REQUEST, S_PAYLOAD, S_SENDHEADER, S_END);
34.	signal EA : fila_out;
35.	
36.	signal buf: buff := (others=>(others=>'0'));
37.	signal first,last: pointer := (others=>'0');
38.	signal tem_espaco: std_logic := '0';
39.	signal counter_flit: regflit := (others=>'0');
40.	signal header_reg: regflit := (others=>'0');
41.	
42.	begin
43.	  
44.	  -- There is available data on Buffer
45.	  tx <= data_av;
46.	  
47.	  -- Processor that will receive message confirm having space on buffer
48.	  data_ack <= credit_i when data_av= '1' else '0';
49.	  
50.	  -- Stores the header fli indicating which processor on bus will communicate
51.	  header_reg <= buf(CONV_INTEGER(first)) when EA = S_SENDHEADER;
52.	
53.	  -- Target Address
54.	  tx_addr <= header_reg;
55.	  
56.	  -------------------------------------------------------------------------------------------
57.	  -- ENTRADA DE DADOS NA FILA
58.	  -------------------------------------------------------------------------------------------
59.	  
60.	  -- Verifica se existe espa\ufffdo na fila para armazenamento de flits.
61.	  -- Se existe espa\ufffdo na fila o sinal tem_espaco_na_fila \ufffd igual 1.
62.	  process(reset, clock)
63.	  begin
64.	    if reset='1' then
65.	      tem_espaco <= '1';
66.	    elsif clock'event and clock='1' then
67.	      if not((first=x"0" and last=TAM_BUFFER - 1) or (first=last+1)) then
68.		tem_espaco <= '1';
69.	      else
70.		tem_espaco <= '0';
71.	      end if;
72.	    end if;
73.	  end process;
74.	  
75.	  -- Buffer has space to receive data from DMNI
76.	  credit_o <= tem_espaco;
77.	  
78.	  -- O ponteiro last \ufffd inicializado com o valor zero quando o reset \ufffd ativado.
79.	  -- Quando o sinal rx \ufffd ativado indicando que existe um flit na porta de entrada \ufffd
80.	  -- verificado se existe espa\ufffdo na fila para armazen\ufffd-lo. Se existir espa\ufffdo na fila o
81.	  -- flit recebido \ufffd armazenado na posi\ufffd\ufffdo apontada pelo ponteiro last e o mesmo \ufffd
82.	  -- incrementado. Quando last atingir o tamanho da fila, ele recebe zero.
83.	  process(reset, clock)
84.	  begin
85.	    if reset='1' then
86.	      last <= (others=>'0');
87.	    elsif clock'event and clock='0' then
88.	      if tem_espaco='1' and rx='1' then
89.		buf(CONV_INTEGER(last)) <= data_in;
90.		--incrementa o last
91.		if(last = TAM_BUFFER - 1) then 
92.		  last <= (others=>'0');
93.		else 
94.		  last <= last + 1;
95.		end if;
96.	      end if;
97.	    end if;
98.	  end process;
99.	  
100.	  -------------------------------------------------------------------------------------------
101.	  -- SA\ufffdDA DE DADOS NA FILA
102.	  -------------------------------------------------------------------------------------------
103.	  
104.	  -- Data to Bus
105.	  data_out <= buf(CONV_INTEGER(first));
106.	  
107.	  process(reset, clock)
108.	  begin
109.	    if reset='1' then
110.	      counter_flit <= (others=>'0');
111.	      data_av <= '0';
112.	      first <= (others=>'0');
113.	      EA <= S_INIT;
114.	      request <= '0';
115.	      using_bus <= '0';
116.	      ack <= '0';
117.	    elsif clock'event and clock='1' then
118.	      case EA is
119.	      when S_INIT =>
120.		counter_flit <= (others=>'0');
121.		data_av <= '0';
122.		if first /= last then -- detectou dado na fila
123.		  EA <= S_REQUEST;
124.	    tx_change_flit  <= '1';
125.		  request <= '1';
126.		else
127.		  EA <= S_INIT;
128.		end if;
129.	      -- Waiting for BUS
130.	      when S_REQUEST =>
131.		if grant = '1' then    -- Will start using the bus and sending the message
132.		  EA <= S_SENDHEADER;
133.		  ack <= '1';
134.		  request <= '0';
135.		  using_bus <= '1';
136.		  data_av <= '1';
137.		else	
138.		  request <= '1';
139.		  EA <= S_REQUEST;
140.		end if;
141.	      when S_SENDHEADER  =>
142.		ack <= '0';
143.	  tx_change_flit  <= '0';
144.		if data_ack = '1' then  -- confirmacao do envio do header
145.		-- retira o header do buffer e se tem dado no buffer pede envio do mesmo
146.		  if (first = TAM_BUFFER -1) then
147.		    first <= (others=>'0');
148.		    if last /= 0 then 
149.		      data_av <= '1';
150.		    else 
151.		      data_av <= '0';
152.		    end if;
153.		  else
154.		    first <= first+1;
155.		    if first+1 /= last then 
156.		      data_av <= '1';
157.		    else 
158.		      data_av <= '0';
159.		    end if;
160.		  end if;
161.		  EA <= S_PAYLOAD;
162.		else	
163.		  EA <= S_SENDHEADER;
164.		end if;
165.	      when S_PAYLOAD =>
166.		if data_ack = '1' and counter_flit /= x"1" then -- confirmacao do envio de um dado que nao eh o tail
167.		-- se counter_flit eh zero indica recepcao do size do payload
168.		if counter_flit = x"0" then    
169.		  counter_flit <=  buf(CONV_INTEGER(first));
170.		else 
171.		  counter_flit <= counter_flit - 1;
172.		end if;
173.		-- retira um dado do buffer e se tem dado no buffer pede envio do mesmo
174.		if (first = TAM_BUFFER -1) then
175.		  first <= (others=>'0');
176.		  if last /= 0 then 
177.		    data_av <= '1';
178.		  else 
179.		    data_av <= '0';
180.		  end if;
181.		else
182.		  first <= first+1;
183.		  if first+1 /= last then 
184.		    data_av <= '1';
185.		  else 
186.		    data_av <= '0';
187.		  end if;
188.		end if;
189.		EA <= S_PAYLOAD;
190.		elsif data_ack = '1' and counter_flit = x"1" then -- confirmacao do envio do tail
191.		  -- retira um dado do buffer
192.		  if (first = TAM_BUFFER -1) then    
193.		    first <= (others=>'0');
194.		  else 
195.		    first <= first+1;
196.		  end if;
197.		  data_av <= '0';
198.		  EA <= S_END;
199.		elsif first /= last then -- se tem dado a ser enviado faz a requisicao
200.		  data_av <= '1';
201.		  EA <= S_PAYLOAD;
202.		else
203.		  EA <= S_PAYLOAD;
204.		end if;
205.	      when others => -- S_END
206.		using_bus <= '0';
207.		data_av <= '0';
208.		EA <= S_INIT;
209.	      end case;
210.	    end if;
211.	  end process;  
212.	end architecture Bus_BridgeRR;
