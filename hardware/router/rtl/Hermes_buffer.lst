1.	------------------------------------------------------------------------------------------------
2.	--
3.	--  DISTRIBUTED HEMPS  - version 5.0
4.	--
5.	--  Research group: GAPH-PUCRS    -    contact   fernando.moraes@pucrs.br
6.	--
7.	--  Distribution:  September 2013
8.	--
9.	--  Source name:  Hermes_buffer.vhd
10.	--
11.	--  Brief description: Description of queues of flits
12.	--
13.	---------------------------------------------------------------------------------------
14.	--                                      BUFFER
15.	--                         --------------
16.	--                   RX ->|             |-> H
17.	--              DATA_IN ->|             |<- ACK_H
18.	--             CLOCK_RX ->|             |
19.	--             CREDIT_O <-|             |-> DATA_AV
20.	--                        |             |-> DATA
21.	--                        |             |<- DATA_ACK
22.	--                        |             |
23.	--                        |             |   SENDER
24.	--                        |             |=> de todas
25.	--                        |             |   as portas
26.	--                         --------------
27.	--
28.	--  Quando o algoritmo de chaveamento resulta no bloqueio dos flits de um pacote,
29.	--  ocorre uma perda de desempenho em toda rede de interconexão, porque os flits são
30.	--  bloqueados não somente na chave atual, mas em todas as intermediárias.
31.	--  Para diminuir a perda de desempenho foi adicionada uma fila em cada porta de
32.	--  entrada da chave, reduzindo as chaves afetadas com o bloqueio dos flits de um
33.	--  pacote. É importante observar que quanto maior for o tamanho da fila menor será o
34.	--  número de chaves intermediárias afetadas.
35.	--  As filas usadas contêm dimensão e largura de flit parametrizáveis, para alterá-las
36.	--  modifique as constantes TAM_BUFFER e TAM_FLIT no arquivo "packet.vhd".
37.	--  As filas funcionam como FIFOs circulares. Cada fila possui dois ponteiros: first e
38.	--  last. First aponta para a posição da fila onde se encontra o flit a ser consumido.
39.	--  Last aponta para a posição onde deve ser inserido o próximo flit.
40.	---------------------------------------------------------------------------------------
41.	library IEEE;
42.	use IEEE.std_logic_1164.all;
43.	use IEEE.std_logic_unsigned.all;
44.	use work.HeMPS_defaults.all;
45.	use work.HemPS_PKG.all;
46.	
47.	-- interface da Hermes_buffer
48.	entity Hermes_buffer is
49.	port(
50.	        clock:      in  std_logic;
51.	        reset:      in  std_logic;
52.	        clock_rx:   in  std_logic;
53.	        rx:         in  std_logic;
54.	        data_in:    in  regflit;
55.	        credit_o:   out std_logic;
56.	        h:          out std_logic;
57.	        ack_h:      in  std_logic;
58.	        data_av:    out std_logic;
59.	        data:       out regflit;
60.	        data_ack:   in  std_logic;
61.	        sender:     out std_logic);
62.	end Hermes_buffer;
63.	
64.	architecture Hermes_buffer of Hermes_buffer is
65.	
66.	type fila_out is (S_INIT, S_PAYLOAD, S_SENDHEADER, S_HEADER, S_END, S_END2);
67.	signal EA : fila_out;
68.	
69.	signal buf: buff := (others=>(others=>'0'));
70.	signal first,last: pointer := (others=>'0');
71.	signal tem_espaco: std_logic := '0';
72.	signal counter_flit: regflit := (others=>'0');
73.	
74.	begin
75.	
76.	        -------------------------------------------------------------------------------------------
77.	        -- ENTRADA DE DADOS NA FILA
78.	        -------------------------------------------------------------------------------------------
79.	
80.	        -- Verifica se existe espaço na fila para armazenamento de flits.
81.	        -- Se existe espaço na fila o sinal tem_espaco_na_fila é igual 1.
82.	        process(reset, clock_rx)
83.	        begin
84.	                if reset='1' then
85.	                        tem_espaco <= '1';
86.	                elsif clock_rx'event and clock_rx='1' then
87.	                        if not((first=x"0" and last=TAM_BUFFER - 1) or (first=last+1)) then
88.	                                tem_espaco <= '1';
89.	--			elsif (((last - first)=x"2") or ((first - last)=TAM_BUFFER - 2)) then
90.	                        else
91.	                                tem_espaco <= '0';
92.	                        end if;
93.	                end if;
94.	        end process;
95.	
96.	        credit_o <= tem_espaco;
97.	
98.	        -- O ponteiro last é inicializado com o valor zero quando o reset é ativado.
99.	        -- Quando o sinal rx é ativado indicando que existe um flit na porta de entrada é
100.	        -- verificado se existe espaço na fila para armazená-lo. Se existir espaço na fila o
101.	        -- flit recebido é armazenado na posição apontada pelo ponteiro last e o mesmo é
102.	        -- incrementado. Quando last atingir o tamanho da fila, ele recebe zero.
103.	        process(reset, clock_rx)
104.	        begin
105.	                if reset='1' then
106.	                        last <= (others=>'0');
107.	                elsif clock_rx'event and clock_rx='0' then
108.	                        if tem_espaco='1' and rx='1' then
109.	                                buf(CONV_INTEGER(last)) <= data_in;
110.	                                --incrementa o last
111.	                                if(last = TAM_BUFFER - 1) then last <= (others=>'0');
112.	                                else last <= last + 1;
113.	                                end if;
114.	                        end if;
115.	                end if;
116.	        end process;
117.	
118.	        -------------------------------------------------------------------------------------------
119.	        -- SAÍDA DE DADOS NA FILA
120.	        -------------------------------------------------------------------------------------------
121.	
122.	        -- disponibiliza o dado para transmissão.
123.	        data <= buf(CONV_INTEGER(first));
124.	
125.	        -- Quando sinal reset é ativado a máquina de estados avança para o estado S_INIT.
126.	        -- No estado S_INIT os sinais counter_flit (contador de flits do corpo do pacote), h (que
127.	        -- indica requisição de chaveamento) e data_av (que indica a existência de flit a ser
128.	        -- transmitido) são inicializados com zero. Se existir algum flit na fila, ou seja, os
129.	        -- ponteiros first e last apontarem para posições diferentes, a máquina de estados avança
130.	        -- para o estado S_HEADER.
131.	        -- No estado S_HEADER é requisitado o chaveamento (h='1'), porque o flit na posição
132.	        -- apontada pelo ponteiro first, quando a máquina encontra-se nesse estado, é sempre o
133.	        -- header do pacote. A máquina permanece neste estado até que receba a confirmação do
134.	        -- chaveamento (ack_h='1') então o sinal h recebe o valor zero e a máquina avança para
135.	        -- S_SENDHEADER.
136.	        -- Em S_SENDHEADER é indicado que existe um flit a ser transmitido (data_av='1'). A máquina de
137.	        -- estados permanece em S_SENDHEADER até receber a confirmação da transmissão (data_ack='1')
138.	        -- então o ponteiro first aponta para o segundo flit do pacote e avança para o estado S_PAYLOAD.
139.	        -- No estado S_PAYLOAD é indicado que existe um flit a ser transmitido (data_av='1') quando
140.	        -- é recebida a confirmação da transmissão (data_ack='1') é verificado qual o valor do sinal
141.	        -- counter_flit. Se counter_flit é igual a um, a máquina avança para o estado S_INIT. Caso
142.	        -- counter_flit seja igual a zero, o sinal counter_flit é inicializado com o valor do flit, pois
143.	        -- este ao número de flits do corpo do pacote. Caso counter_flit seja diferente de um e de zero
144.	        -- o mesmo é decrementado e a máquina de estados permanece em S_PAYLOAD enviando o próximo flit
145.	        -- do pacote.
146.	        process(reset, clock)
147.	        begin
148.	                if reset='1' then
149.	                        counter_flit <= (others=>'0');
150.	                        h <= '0';
151.	                        data_av <= '0';
152.	                        sender <=  '0';
153.	                        first <= (others=>'0');
154.	                        EA <= S_INIT;
155.	                elsif clock'event and clock='1' then
156.	                        case EA is
157.	                                when S_INIT =>
158.	                                        counter_flit <= (others=>'0');
159.	                                        h<='0';
160.	                                        data_av <= '0';
161.	                                        if first /= last then -- detectou dado na fila
162.	                                                h<='1';           -- pede roteamento
163.	                                                EA <= S_HEADER;
164.	                                        else
165.	                                                EA<= S_INIT;
166.	                                        end if;
167.	                                when S_HEADER =>
168.	                                        if ack_h='1' then -- confirmação de roteamento
169.	                                                EA <= S_SENDHEADER ;
170.	                                                h<='0';
171.	                                                data_av <= '1';
172.	                                                sender <=  '1';
173.	                                        else
174.	                                                EA <= S_HEADER;
175.	                                        end if;
176.	                                when S_SENDHEADER  =>
177.	                                        if data_ack = '1' then  -- confirmação do envio do header
178.	                                                -- retira o header do buffer e se tem dado no buffer pede envio do mesmo
179.	                                                if (first = TAM_BUFFER -1) then
180.	                                                        first <= (others=>'0');
181.	                                                        if last /= 0 then data_av <= '1';
182.	                                                        else data_av <= '0';
183.	                                                        end if;
184.	                                                else
185.	                                                        first <= first+1;
186.	                                                        if first+1 /= last then data_av <= '1';
187.	                                                        else data_av <= '0';
188.	                                                        end if;
189.	                                                end if;
190.	                                                EA <= S_PAYLOAD;
191.	                                        else
192.	                                                EA <= S_SENDHEADER;
193.	                                        end if;
194.	                                when S_PAYLOAD =>
195.	                                        if data_ack = '1' and counter_flit /= x"1" then -- confirmação do envio de um dado que não é o tail
196.	                                                -- se counter_flit é zero indica recepção do size do payload
197.	                                                if counter_flit = x"0" then    counter_flit <=  buf(CONV_INTEGER(first));
198.	                                                else counter_flit <= counter_flit - 1;
199.	                                                end if;
200.	
201.	                                                -- retira um dado do buffer e se tem dado no buffer pede envio do mesmo
202.	                                                if (first = TAM_BUFFER -1) then
203.	                                                        first <= (others=>'0');
204.	                                                        if last /= 0 then data_av <= '1';
205.	                                                        else data_av <= '0';
206.	                                                        end if;
207.	                                                else
208.	                                                        first <= first+1;
209.	                                                        if first+1 /= last then data_av <= '1';
210.	                                                        else data_av <= '0';
211.	                                                        end if;
212.	                                                end if;
213.	                                                EA <= S_PAYLOAD;
214.	                                        elsif data_ack = '1' and counter_flit = x"1" then -- confirmação do envio do tail
215.	                                                -- retira um dado do buffer
216.	                                                if (first = TAM_BUFFER -1) then    first <= (others=>'0');
217.	                                                else first <= first+1;
218.	                                                end if;
219.	                                                data_av <= '0';
220.	                                                sender <=  '0';
221.	                                                EA <= S_END;
222.	                                        elsif first /= last then -- se tem dado a ser enviado faz a requisição
223.	                                                data_av <= '1';
224.	                                                EA <= S_PAYLOAD;
225.	                                        else
226.	                                                EA <= S_PAYLOAD;
227.	                                        end if;
228.	                                when S_END =>
229.	                                        data_av <= '0';
230.	                                        EA <= S_END2;
231.	                                when S_END2 => -- estado necessario para permitir a liberação da porta antes da solicitação de novo envio
232.	                                        data_av <= '0';
233.	                                        EA <= S_INIT;
234.	                        end case;
235.	                end if;
236.	        end process;
237.	
238.	end Hermes_buffer;
