1.	------------------------------------------------------------------------------------------------
2.	--
3.	--  DISTRIBUTED HEMPS  - version 5.0
4.	--
5.	--  Research group: GAPH-PUCRS    -    contact   fernando.moraes@pucrs.br
6.	--
7.	--  Distribution:  September 2013
8.	--
9.	--  Source name:  bus_mux.vhd
10.	--
11.	--  AUTHOR: Steve Rhoads (rhoadss@yahoo.com)
12.	--
13.	--  COPYRIGHT: Software placed into the public domain by the author.
14.	--    Software 'as is' without warranty.  Author liable for nothing.
15.	--
16.	--  DATE CREATED: 2/8/01
17.	--
18.	--  Brief description:  This entity is the main signal router.  
19.	--
20.	--    It multiplexes signals from multiple sources to the correct location.
21.	--    The outputs are as follows:
22.	--       a_bus        : goes to the ALU
23.	--       b_bus        : goes to the ALU
24.	--       reg_dest_out : goes to the register bank
25.	--       take_branch  : goes to pc_next
26.	--
27.	------------------------------------------------------------------------------------------------
28.	
29.	library ieee;
30.	use ieee.std_logic_1164.all;
31.	use work.mlite_pack.all;
32.	
33.	entity bus_mux is
34.	   port(imm_in       : in  std_logic_vector(15 downto 0);
35.	        reg_source   : in  std_logic_vector(31 downto 0);
36.	        a_mux        : in  a_source_type;
37.	        a_out        : out std_logic_vector(31 downto 0);
38.	
39.	        reg_target   : in  std_logic_vector(31 downto 0);
40.	        b_mux        : in  b_source_type;
41.	        b_out        : out std_logic_vector(31 downto 0);
42.	
43.	        c_bus        : in  std_logic_vector(31 downto 0);
44.	        c_memory     : in  std_logic_vector(31 downto 0);
45.	        c_pc         : in  std_logic_vector(31 downto 2);
46.	        c_pc_plus4   : in  std_logic_vector(31 downto 2);
47.	        c_pc_past    : in  std_logic_vector(31 downto 2);
48.	        c_mux        : in  c_source_type;
49.	        reg_dest_out : out std_logic_vector(31 downto 0);
50.	
51.	        branch_func  : in  branch_function_type;
52.	        take_branch  : out std_logic);
53.	end; --entity bus_mux
54.	
55.	architecture logic of bus_mux is
56.	begin
57.	
58.	--Determine value of a_bus
59.	amux: process(reg_source, imm_in, a_mux, c_pc) 
60.	begin
61.	   case a_mux is
62.	   when A_FROM_REG_SOURCE =>
63.	      a_out <= reg_source;
64.	   when A_FROM_IMM10_6 =>
65.	      a_out <= ZERO(31 downto 5) & imm_in(10 downto 6);
66.	   when A_FROM_PC =>
67.	      a_out <= c_pc & "00";
68.	   when others =>
69.	      a_out <= c_pc & "00";
70.	   end case;
71.	end process;
72.	
73.	--Determine value of b_bus
74.	bmux: process(reg_target, imm_in, b_mux) 
75.	begin
76.	   case b_mux is
77.	   when B_FROM_REG_TARGET =>
78.	      b_out <= reg_target;
79.	   when B_FROM_IMM =>
80.	      b_out <= ZERO(31 downto 16) & imm_in;
81.	   when B_FROM_SIGNED_IMM =>
82.	      if imm_in(15) = '0' then
83.	         b_out(31 downto 16) <= ZERO(31 downto 16);
84.	      else
85.	         b_out(31 downto 16) <= "1111111111111111";
86.	      end if;
87.	      b_out(15 downto 0) <= imm_in;
88.	   when B_FROM_IMMX4 =>
89.	      if imm_in(15) = '0' then
90.	         b_out(31 downto 18) <= "00000000000000";
91.	      else
92.	         b_out(31 downto 18) <= "11111111111111";
93.	      end if;
94.	      b_out(17 downto 0) <= imm_in & "00";
95.	   when others =>
96.	      b_out <= reg_target;
97.	   end case;
98.	end process;
99.	
100.	--Determine value of c_bus								
101.	cmux: process(c_bus, c_memory, c_pc, c_pc_plus4, imm_in, c_mux) 
102.	begin
103.	   case c_mux is
104.	   when C_FROM_ALU =>  -- | C_FROM_SHIFT | C_FROM_MULT =>
105.	      reg_dest_out <= c_bus;
106.	   when C_FROM_MEMORY =>
107.	      reg_dest_out <= c_memory;
108.	   when C_FROM_PC =>
109.	      reg_dest_out <= c_pc(31 downto 2) & "00"; 
110.	   when C_FROM_PC_PLUS4 =>
111.	      reg_dest_out <= c_pc_plus4 & "00";
112.	   when C_FROM_PC_PAST =>      
113.	      reg_dest_out <= c_pc_past & "00";
114.	   when C_FROM_IMM_SHIFT16 =>
115.	      reg_dest_out <= imm_in & ZERO(15 downto 0);
116.	   when others =>
117.	      reg_dest_out <= c_bus;
118.	   end case;
119.	end process;
120.	
121.	--Determine value of take_branch
122.	pc_mux: process(branch_func, reg_source, reg_target) 
123.	   variable is_equal : std_logic;
124.	begin
125.	   if reg_source = reg_target then
126.	      is_equal := '1';
127.	   else
128.	      is_equal := '0';
129.	   end if;
130.	   case branch_func is
131.	   when BRANCH_LTZ =>
132.	      take_branch <= reg_source(31);
133.	   when BRANCH_LEZ =>
134.	      take_branch <= reg_source(31) or is_equal;
135.	   when BRANCH_EQ =>
136.	      take_branch <= is_equal;
137.	   when BRANCH_NE =>
138.	      take_branch <= not is_equal;
139.	   when BRANCH_GEZ =>
140.	      take_branch <= not reg_source(31);
141.	   when BRANCH_GTZ =>
142.	      take_branch <= not reg_source(31) and not is_equal;
143.	   when BRANCH_YES =>
144.	      take_branch <= '1';
145.	   when others =>
146.	      take_branch <= '0';
147.	   end case;
148.	end process;
149.	
150.	end; --architecture logic
