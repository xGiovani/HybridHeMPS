1.	------------------------------------------------------------------------------------------------
2.	--
3.	--  DISTRIBUTED HEMPS  - version 5.0
4.	--
5.	--  Research group: GAPH-PUCRS    -    contact   fernando.moraes@pucrs.br
6.	--
7.	--  Distribution:  September 2013
8.	--
9.	--  Source name:  pipeline.vhd
10.	--
11.	--  AUTHOR: Steve Rhoads (rhoadss@yahoo.com)
12.	--
13.	--  DATE CREATED: 6/24/02
14.	--
15.	--  COPYRIGHT: Software placed into the public domain by the author.
16.	--    Software 'as is' without warranty.  Author liable for nothing.
17.	--
18.	--  Brief description:  Controls the three stage pipeline by delaying the signals:
19.	--     			a_bus, b_bus, alu/shift/mult_func, c_source, and rs_index.
20.	--
21.	------------------------------------------------------------------------------------------------
22.	
23.	library ieee;
24.	use ieee.std_logic_1164.all;
25.	use work.mlite_pack.all;
26.	
27.	--Note: sigD <= sig after rising_edge(clk)
28.	entity pipeline is
29.	   port(clk            : in  std_logic;
30.	        reset          : in  std_logic;
31.	        a_bus          : in  std_logic_vector(31 downto 0);
32.	        a_busD         : out std_logic_vector(31 downto 0);
33.	        b_bus          : in  std_logic_vector(31 downto 0);
34.	        b_busD         : out std_logic_vector(31 downto 0);
35.	        alu_func       : in  alu_function_type;
36.	        alu_funcD      : out alu_function_type;
37.	        shift_func     : in  shift_function_type;
38.	        shift_funcD    : out shift_function_type;
39.	        mult_func      : in  mult_function_type;
40.	        mult_funcD     : out mult_function_type;
41.	        reg_dest       : in  std_logic_vector(31 downto 0);
42.	        reg_destD      : out std_logic_vector(31 downto 0);
43.	        rd_index       : in  std_logic_vector(5 downto 0);
44.	        rd_indexD      : out std_logic_vector(5 downto 0);
45.	
46.	        rs_index       : in  std_logic_vector(5 downto 0);
47.	        rt_index       : in  std_logic_vector(5 downto 0);
48.	        pc_source      : in  pc_source_type;
49.	        mem_source     : in  mem_source_type;
50.	        a_source       : in  a_source_type;
51.	        b_source       : in  b_source_type;
52.	        c_source       : in  c_source_type;
53.	        c_bus          : in  std_logic_vector(31 downto 0);
54.	        pause_any      : in  std_logic;
55.	        pause_pipeline : out std_logic);
56.	end; --entity pipeline
57.	
58.	architecture logic of pipeline is
59.	   signal rd_index_reg     : std_logic_vector(5 downto 0);
60.	   signal reg_dest_reg     : std_logic_vector(31 downto 0);
61.	   signal reg_dest_delay   : std_logic_vector(31 downto 0);
62.	   signal c_source_reg     : c_source_type;
63.	   signal pause_enable_reg : std_logic;
64.	begin
65.	
66.	--When operating in three stage pipeline mode, the following signals
67.	--are delayed by one clock cycle:  a_bus, b_bus, alu/shift/mult_func,
68.	--c_source, and rd_index.
69.	pipeline3: process(clk, reset, a_bus, b_bus, alu_func, shift_func, mult_func,
70.	      rd_index, rd_index_reg, pause_any, pause_enable_reg, 
71.	      rs_index, rt_index,
72.	      pc_source, mem_source, a_source, b_source, c_source, c_source_reg, 
73.	      reg_dest, reg_dest_reg, reg_dest_delay, c_bus)
74.	   variable pause_mult_clock : std_logic;
75.	   variable freeze_pipeline  : std_logic;
76.	begin
77.	   if (pc_source /= FROM_INC4 and pc_source /= FROM_OPCODE25_0) or
78.	         mem_source /= MEM_FETCH or
79.	         (mult_func = MULT_READ_LO or mult_func = MULT_READ_HI) then
80.	      pause_mult_clock := '1';
81.	   else
82.	      pause_mult_clock := '0';
83.	   end if;
84.	
85.	   freeze_pipeline := not (pause_mult_clock and pause_enable_reg) and pause_any;
86.	   pause_pipeline <= pause_mult_clock and pause_enable_reg;
87.	   rd_indexD <= rd_index_reg;
88.	
89.	   if c_source_reg = C_FROM_ALU then
90.	      reg_dest_delay <= c_bus;        --delayed by 1 clock cycle via a_busD & b_busD
91.	   else
92.	      reg_dest_delay <= reg_dest_reg; --need to delay 1 clock cycle from reg_dest
93.	   end if;
94.	   reg_destD <= reg_dest_delay;
95.	
96.	   if reset = '1' then
97.	      a_busD <= ZERO;
98.	      b_busD <= ZERO;
99.	      alu_funcD <= ALU_NOTHING;
100.	      shift_funcD <= SHIFT_NOTHING;
101.	      mult_funcD <= MULT_NOTHING;
102.	      reg_dest_reg <= ZERO;
103.	      c_source_reg <= "000";
104.	      rd_index_reg <= "000000";
105.	      pause_enable_reg <= '0';
106.	   elsif rising_edge(clk) then
107.	      if freeze_pipeline = '0' then
108.	         if (rs_index = "000000" or rs_index /= rd_index_reg) or 
109.	            (a_source /= A_FROM_REG_SOURCE or pause_enable_reg = '0') then
110.	            a_busD <= a_bus;
111.	         else
112.	            a_busD <= reg_dest_delay;  --rs from previous operation (bypass stage)
113.	         end if;
114.	
115.	         if (rt_index = "000000" or rt_index /= rd_index_reg) or
116.	               (b_source /= B_FROM_REG_TARGET or pause_enable_reg = '0') then
117.	            b_busD <= b_bus;
118.	         else
119.	            b_busD <= reg_dest_delay;  --rt from previous operation
120.	         end if;
121.	
122.	         alu_funcD <= alu_func;
123.	         shift_funcD <= shift_func;
124.	         mult_funcD <= mult_func;
125.	         reg_dest_reg <= reg_dest;
126.	         c_source_reg <= c_source;
127.	         rd_index_reg <= rd_index;
128.	      end if;
129.	
130.	      if pause_enable_reg = '0' and pause_any = '0' then
131.	         pause_enable_reg <= '1';   --enable pause_pipeline
132.	      elsif pause_mult_clock = '1' then
133.	         pause_enable_reg <= '0';   --disable pause_pipeline
134.	      end if;
135.	   end if;
136.	
137.	end process; --pipeline3
138.	
139.	end; --logic
