1.	------------------------------------------------------------------------------------------------
2.	--
3.	--  DISTRIBUTED HEMPS  - version 5.0
4.	--
5.	--  Research group: GAPH-PUCRS    -    contact   fernando.moraes@pucrs.br
6.	--
7.	--  Distribution:  September 2013
8.	--
9.	--  Source name:  mlite_cpu.vhd
10.	--
11.	--  AUTHOR: Steve Rhoads (rhoadss@yahoo.com)
12.	--
13.	--  COPYRIGHT: Software placed into the public domain by the author.
14.	--    Software 'as is' without warranty.  Author liable for nothing.
15.	--
16.	--  NOTE:  MIPS(tm) and MIPS I(tm) are registered trademarks of MIPS 
17.	--    Technologies.  MIPS Technologies does not endorse and is not 
18.	--    associated with this project.
19.	--
20.	--  DATE CREATED: 2/15/01
21.	--
22.	--  Brief description:  Top level VHDL document that ties the nine other entities together.
23.	--
24.	------------------------------------------------------------------------------------------------
25.	
26.	-- Executes all MIPS I(tm) opcodes but exceptions and non-aligned
27.	-- memory accesses.  Based on information found in:
28.	--    "MIPS RISC Architecture" by Gerry Kane and Joe Heinrich
29.	--    and "The Designer's Guide to VHDL" by Peter J. Ashenden
30.	--
31.	-- The CPU is implemented as a three or four stage pipeline.
32.	-- An add instruction would take the following steps (see cpu.gif):
33.	-- Stage #1:
34.	--    1.  The "pc_next" entity passes the program counter (PC) to the 
35.	--        "mem_ctrl" entity which fetches the opcode from memory.
36.	-- Stage #2:
37.	--    2.  The memory returns the opcode.
38.	-- Stage #3:
39.	--    3.  "Mem_ctrl" passes the opcode to the "control" entity.
40.	--    4.  "Control" converts the 32-bit opcode to a 60-bit VLWI opcode
41.	--        and sends control signals to the other entities.
42.	--    5.  Based on the rs_index and rt_index control signals, "reg_bank" 
43.	--        sends the 32-bit reg_source and reg_target to "bus_mux".
44.	--    6.  Based on the a_source and b_source control signals, "bus_mux"
45.	--        multiplexes reg_source onto a_bus and reg_target onto b_bus.
46.	-- Stage #4 (part of stage #3 if using three stage pipeline):
47.	--    7.  Based on the alu_func control signals, "alu" adds the values
48.	--        from a_bus and b_bus and places the result on c_bus.
49.	--    8.  Based on the c_source control signals, "bus_bux" multiplexes
50.	--        c_bus onto reg_dest.
51.	--    9.  Based on the rd_index control signal, "reg_bank" saves
52.	--        reg_dest into the correct register.
53.	-- Stage #4b:
54.	--   10.  Read or write memory if needed.
55.	--
56.	-- All signals are active high. 
57.	-- Here are the signals for writing a character to address 0xffff
58.	-- when using a three stage pipeline:
59.	--
60.	-- Program:
61.	-- addr     value  opcode 
62.	-- =============================
63.	--   3c: 00000000  nop
64.	--   40: 34040041  li $a0,0x41
65.	--   44: 3405ffff  li $a1,0xffff
66.	--   48: a0a40000  sb $a0,0($a1)
67.	--   4c: 00000000  nop
68.	--   50: 00000000  nop
69.	--
70.	--      intr_in                             mem_pause 
71.	--  reset_in                           mem_byte_we     Stages
72.	--     ns     mem_address mem_data_w mem_data_r        40 44 48 4c 50
73.	--   3500  0  0  00000040   00000000   00000000  0  0   1
74.	--   3600  0  0  00000044   00000000   34040041  0  0   2  1
75.	--   3700  0  0  00000048   00000000   3405FFFF  0  0   3  2  1 
76.	--   3800  0  0  0000004C   00000000   A0A40000  0  0      3  2  1
77.	--   3900  0  0  0000FFFC   41414141   00000000  1  0         3  2
78.	--   4000  0  0  00000050   41414141   XXXXXX41  0  0         4b 3  1
79.	--   4100  0  0  00000054   00000000   00000000  0  0               2
80.	--
81.	-- 
82.	--   Simple paging mechanism and syscall instruction added.
83.	---------------------------------------------------------------------
84.	library ieee;
85.	use work.mlite_pack.all;
86.	use work.HeMPS_defaults.all;
87.	use work.HeMPS_PKG.all;
88.	use ieee.std_logic_1164.all;
89.	use ieee.std_logic_unsigned.all;
90.	
91.	entity mlite_cpu is
92.	   generic(memory_type     : string  := "XIL"; --ALTERA_LPM, or DUAL_PORT_
93.	           mult_type       : string  := "DEF"; --AREA_OPTIMIZED
94.	           shifter_type    : string  := "DEF"; --AREA_OPTIMIZED
95.	           alu_type        : string  := "DEF"; --AREA_OPTIMIZED
96.	           pipeline_stages : natural := 3); --3 or 4
97.	   port(clk         : in std_logic;
98.	        reset_in    : in std_logic;
99.	        intr_in     : in std_logic;
100.	
101.	        mem_address : out std_logic_vector(31 downto 0);
102.	        mem_data_w  : out std_logic_vector(31 downto 0);
103.	        mem_data_r  : in  std_logic_vector(31 downto 0);
104.	        mem_byte_we : out std_logic_vector(3 downto 0); 
105.	        mem_pause   : in  std_logic;
106.	        current_page: out std_logic_vector(7 downto 0)
107.		);
108.	        
109.	end; --entity mlite_cpu
110.	
111.	architecture logic of mlite_cpu is
112.	   --When using a three stage pipeline "sigD <= sig".
113.	   --When using a four stage pipeline "sigD <= sig when rising_edge(clk)",
114.	   --  so sigD is delayed by one clock cycle.
115.	   signal opcode         : std_logic_vector(31 downto 0);
116.	   signal rs_index       : std_logic_vector(5 downto 0);
117.	   signal rt_index       : std_logic_vector(5 downto 0);
118.	   signal rd_index       : std_logic_vector(5 downto 0);
119.	   signal rd_indexD      : std_logic_vector(5 downto 0);
120.	   signal reg_source     : std_logic_vector(31 downto 0);
121.	   signal reg_target     : std_logic_vector(31 downto 0);
122.	   signal reg_dest       : std_logic_vector(31 downto 0);
123.	   signal reg_destD      : std_logic_vector(31 downto 0);
124.	   signal a_bus          : std_logic_vector(31 downto 0);
125.	   signal a_busD         : std_logic_vector(31 downto 0);
126.	   signal b_bus          : std_logic_vector(31 downto 0);
127.	   signal b_busD         : std_logic_vector(31 downto 0);
128.	   signal c_bus          : std_logic_vector(31 downto 0);
129.	   signal c_alu          : std_logic_vector(31 downto 0);
130.	   signal c_shift        : std_logic_vector(31 downto 0);
131.	   signal c_mult         : std_logic_vector(31 downto 0);
132.	   signal c_memory       : std_logic_vector(31 downto 0);
133.	   signal imm            : std_logic_vector(15 downto 0);
134.	   signal pc_future      : std_logic_vector(31 downto 2);
135.	   signal pc_current     : std_logic_vector(31 downto 2);
136.	   signal pc_plus4       : std_logic_vector(31 downto 2);
137.	   signal pc_past        : std_logic_vector(31 downto 2);
138.	   signal alu_func       : alu_function_type;
139.	   signal alu_funcD      : alu_function_type;
140.	   signal shift_func     : shift_function_type;
141.	   signal shift_funcD    : shift_function_type;
142.	   signal mult_func      : mult_function_type;
143.	   signal mult_funcD     : mult_function_type;
144.	   signal branch_func    : branch_function_type;
145.	   signal take_branch    : std_logic;
146.	   signal a_source       : a_source_type;
147.	   signal b_source       : b_source_type;
148.	   signal c_source       : c_source_type;
149.	   signal pc_source      : pc_source_type;
150.	   signal mem_source     : mem_source_type;
151.	   signal pause_mult     : std_logic;
152.	   signal pause_ctrl     : std_logic;
153.	   signal pause_pipeline : std_logic;
154.	   signal pause_any      : std_logic;
155.	   signal pause_non_ctrl : std_logic;
156.	   signal pause_bank     : std_logic;
157.	   signal nullify_op     : std_logic;
158.	   signal intr_enable    : std_logic;
159.	   signal intr_signal    : std_logic;
160.	   signal reset_reg      : std_logic_vector(3 downto 0);
161.	   signal reset          : std_logic; 
162.	   signal page           : std_logic_vector(31 downto 0);  --page
163.	   signal mem_address_wop: std_logic_vector(31 downto 2); --address without page
164.	-- Counter Instructions Logic
165.	   --signal pc_delay: std_logic_vector(29 downto 0) := (others=>'0');
166.	begin  --architecture
167.	
168.		-- Counter Instructions Logic
169.		-- process(reset_in,clk)
170.		-- begin
171.			-- if reset_in = '1' then
172.				-- pc_delay <= (others=>'0');
173.				-- count_instruc <= (others=>'0');
174.			-- elsif rising_edge(clk) then
175.				-- pc_delay <= pc_current;
176.				-- if pc_delay /= pc_current then
177.					-- count_instruc <= count_instruc + 1;
178.				-- end if;
179.			-- end if;
180.		-- end process;
181.	  
182.	   pause_any <= (mem_pause or pause_ctrl) or (pause_mult or pause_pipeline);
183.	   pause_non_ctrl <= (mem_pause or pause_mult) or pause_pipeline;
184.	   pause_bank <= (mem_pause or pause_ctrl or pause_mult) and not pause_pipeline;
185.	   nullify_op <= '1' when (pc_source = FROM_LBRANCH and take_branch = '0')
186.	                          or intr_signal = '1' 
187.	                          else '0';
188.	   c_bus <= c_alu or c_shift or c_mult;
189.	   reset <= '1' when reset_in = '1' or reset_reg /= "1111" else '0';
190.	
191.	   --synchronize reset and interrupt pins
192.	   intr_proc: process(clk, reset_in, reset_reg, intr_in, intr_enable, 
193.	      pc_source, pc_current, pause_any)
194.	   begin
195.	      if reset_in = '1' then
196.	         reset_reg <= "0000";
197.	         intr_signal <= '0';
198.	      elsif rising_edge(clk) then
199.	         if reset_reg /= "1111" then
200.	            reset_reg <= reset_reg + 1;
201.	         end if;
202.	
203.	         --don't try to interrupt a multi-cycle instruction
204.	         if pause_any = '0' then
205.	            if intr_in = '1' and intr_enable = '1' and 
206.	                  pc_source = FROM_INC4 then
207.	               --the epc will contain pc+4
208.	               intr_signal <= '1';
209.	            else
210.	               intr_signal <= '0';
211.	            end if;
212.	         end if;
213.	
214.	      end if;
215.	   end process;
216.	
217.	   u1_pc_next: pc_next PORT MAP (
218.	        clk          => clk,
219.	        reset_in     => reset,
220.	        take_branch  => take_branch,
221.	        pause_in     => pause_any,
222.	        pc_new       => c_bus(31 downto 2),
223.	        opcode25_0   => opcode(25 downto 0),
224.	        pc_source    => pc_source,
225.	        pc_future    => pc_future,
226.	        pc_current   => pc_current,
227.	        pc_plus4     => pc_plus4,
228.	        pc_past      => pc_past); --modified (syscall)
229.	
230.	   u2_mem_ctrl: mem_ctrl 
231.	      PORT MAP (
232.	        clk          => clk,
233.	        reset_in     => reset,
234.	        pause_in     => pause_non_ctrl,
235.	        nullify_op   => nullify_op,
236.	        address_pc   => pc_future,
237.	        opcode_out   => opcode,
238.	
239.	        address_in   => c_bus,
240.	        mem_source   => mem_source,
241.	        data_write   => reg_target,
242.	        data_read    => c_memory,
243.	        pause_out    => pause_ctrl,
244.	        
245.	        mem_address  => mem_address_wop, --modified (paging)
246.	        mem_data_w   => mem_data_w,
247.	        mem_data_r   => mem_data_r,
248.	        mem_byte_we  => mem_byte_we);
249.	
250.	   u3_control: control PORT MAP (
251.	        opcode       => opcode,
252.	        intr_signal  => intr_signal,
253.	        rs_index     => rs_index,
254.	        rt_index     => rt_index,
255.	        rd_index     => rd_index,
256.	        imm_out      => imm,
257.	        alu_func     => alu_func,
258.	        shift_func   => shift_func,
259.	        mult_func    => mult_func,
260.	        branch_func  => branch_func,
261.	        a_source_out => a_source,
262.	        b_source_out => b_source,
263.	        c_source_out => c_source,
264.	        pc_source_out=> pc_source,
265.	        mem_source_out=> mem_source);
266.	
267.	   u4_reg_bank: reg_bank 
268.	      generic map(memory_type => memory_type)
269.	      port map (
270.	        clk            => clk,
271.	        reset_in       => reset,
272.	        pause          => pause_bank,
273.	      page        => page,
274.	        rs_index       => rs_index,
275.	        rt_index       => rt_index,
276.	        rd_index       => rd_indexD,
277.	        reg_source_out => reg_source,
278.	        reg_target_out => reg_target,
279.	        reg_dest_new   => reg_destD,
280.	        intr_enable    => intr_enable);
281.	
282.	   u5_bus_mux: bus_mux port map (
283.	        imm_in       => imm,
284.	        reg_source   => reg_source,
285.	        a_mux        => a_source,
286.	        a_out        => a_bus,
287.	
288.	        reg_target   => reg_target,
289.	        b_mux        => b_source,
290.	        b_out        => b_bus,
291.	
292.	        c_bus        => c_bus,
293.	        c_memory     => c_memory,
294.	        c_pc         => pc_current,
295.	        c_pc_plus4   => pc_plus4,
296.	        c_pc_past    => pc_past,
297.	        c_mux        => c_source,
298.	        reg_dest_out => reg_dest,
299.	
300.	        branch_func  => branch_func,
301.	        take_branch  => take_branch);
302.	
303.	   u6_alu: alu 
304.	      generic map (alu_type => alu_type)
305.	      port map (
306.	        a_in         => a_busD,
307.	        b_in         => b_busD,
308.	        alu_function => alu_funcD,
309.	        c_alu        => c_alu);
310.	
311.	   u7_shifter: shifter
312.	      generic map (shifter_type => shifter_type)
313.	      port map (
314.	        value        => b_busD,
315.	        shift_amount => a_busD(4 downto 0),
316.	        shift_func   => shift_funcD,
317.	        c_shift      => c_shift);
318.	
319.	   u8_mult: mult 
320.	      generic map (mult_type => mult_type)
321.	      port map (
322.	        clk       => clk,
323.	        reset_in  => reset,
324.	        a         => a_busD,
325.	        b         => b_busD,
326.	        mult_func => mult_funcD,
327.	        c_mult    => c_mult,
328.	        pause_out => pause_mult);
329.	
330.	   pipeline3: if pipeline_stages <= 3 generate
331.	      a_busD <= a_bus;
332.	      b_busD <= b_bus;
333.	      alu_funcD <= alu_func;
334.	      shift_funcD <= shift_func;
335.	      mult_funcD <= mult_func;
336.	      rd_indexD <= rd_index;
337.	      reg_destD <= reg_dest;
338.	      pause_pipeline <= '0';
339.	   end generate; --pipeline2
340.	
341.	   pipeline4: if pipeline_stages > 3 generate
342.	      --When operating in four stage pipeline mode, the following signals
343.	      --are delayed by one clock cycle:  a_bus, b_bus, alu/shift/mult_func,
344.	      --c_source, and rd_index.
345.	   u9_pipeline: pipeline port map (
346.	        clk            => clk,
347.	        reset          => reset,
348.	        a_bus          => a_bus,
349.	        a_busD         => a_busD,
350.	        b_bus          => b_bus,
351.	        b_busD         => b_busD,
352.	        alu_func       => alu_func,
353.	        alu_funcD      => alu_funcD,
354.	        shift_func     => shift_func,
355.	        shift_funcD    => shift_funcD,
356.	        mult_func      => mult_func,
357.	        mult_funcD     => mult_funcD,
358.	        reg_dest       => reg_dest,
359.	        reg_destD      => reg_destD,
360.	        rd_index       => rd_index,
361.	        rd_indexD      => rd_indexD,
362.	
363.	        rs_index       => rs_index,
364.	        rt_index       => rt_index,
365.	        pc_source      => pc_source,
366.	        mem_source     => mem_source,
367.	        a_source       => a_source,
368.	        b_source       => b_source,
369.	        c_source       => c_source,
370.	        c_bus          => c_bus,
371.	        pause_any      => pause_any,
372.	        pause_pipeline => pause_pipeline);
373.	
374.	   end generate; --pipeline4
375.	
376.		 --Page size: 16384 Bytes
377.		mem_address <= mem_address_wop(31 downto PAGE_NUMBER_H_INDEX+1) & page(PAGE_NUMBER_H_INDEX downto PAGE_SIZE_H_INDEX+1) & mem_address_wop(PAGE_SIZE_H_INDEX downto 2)& "00" when page /= ZERO else
378.				mem_address_wop & "00";
379.	
380.		current_page <= page(PAGE_SIZE_H_INDEX+8 downto PAGE_SIZE_H_INDEX+1);
381.	
382.	end; --architecture logic
