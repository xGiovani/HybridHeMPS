1.	------------------------------------------------------------------------------------------------
2.	--
3.	--  DISTRIBUTED HEMPS  - version 5.0
4.	--
5.	--  Research group: GAPH-PUCRS    -    contact   fernando.moraes@pucrs.br
6.	--
7.	--  Distribution:  September 2013
8.	--
9.	--  AUTHOR: Steve Rhoads (rhoadss@yahoo.com)
10.	--
11.	--  COPYRIGHT: Software placed into the public domain by the author.
12.	--    Software 'as is' without warranty.  Author liable for nothing.
13.	--
14.	--  DATE CREATED: 1/31/01
15.	--
16.	--  Source name:  mem_ctrl.vhd
17.	--
18.	--  Brief description:  Memory controller for the Plasma CPU.
19.	--    			Supports Big or Little Endian mode.
20.	--
21.	------------------------------------------------------------------------------------------------
22.	
23.	library ieee;
24.	use ieee.std_logic_1164.all;
25.	use work.mlite_pack.all;
26.	
27.	entity mem_ctrl is
28.	   port(clk          : in std_logic;
29.	        reset_in     : in std_logic;
30.	        pause_in     : in std_logic;
31.	        nullify_op   : in std_logic;
32.	        address_pc   : in std_logic_vector(31 downto 2);
33.	        opcode_out   : out std_logic_vector(31 downto 0);
34.	
35.	        address_in   : in std_logic_vector(31 downto 0);
36.	        mem_source   : in mem_source_type;
37.	        data_write   : in std_logic_vector(31 downto 0);
38.	        data_read    : out std_logic_vector(31 downto 0);
39.	        pause_out    : out std_logic;
40.	        
41.	        mem_address  : out std_logic_vector(31 downto 2);
42.	        mem_data_w   : out std_logic_vector(31 downto 0);
43.	        mem_data_r   : in std_logic_vector(31 downto 0);
44.	        mem_byte_we  : out std_logic_vector(3 downto 0));
45.	end; --entity mem_ctrl
46.	
47.	architecture logic of mem_ctrl is
48.	   --"00" = big_endian; "11" = little_endian
49.	   constant ENDIAN_MODE   : std_logic_vector(1 downto 0) := "00";
50.	   signal opcode_reg      : std_logic_vector(31 downto 0);
51.	   signal next_opcode_reg : std_logic_vector(31 downto 0);
52.	
53.	   signal mem_state_reg   : std_logic;
54.	   constant STATE_ADDR    : std_logic := '0';
55.	   constant STATE_ACCESS  : std_logic := '1';
56.	
57.	begin
58.	
59.	mem_proc: process(clk, reset_in, pause_in, nullify_op, 
60.	                  address_pc, address_in, mem_source, data_write, 
61.	                  mem_data_r, opcode_reg, next_opcode_reg, mem_state_reg)
62.	   variable address_var    : std_logic_vector(31 downto 2);
63.	   variable data_read_var  : std_logic_vector(31 downto 0);
64.	   variable data_write_var : std_logic_vector(31 downto 0);
65.	   variable opcode_next    : std_logic_vector(31 downto 0);
66.	   variable byte_sel_var   : std_logic_vector(3 downto 0);
67.	   variable mem_state_next : std_logic;
68.	   variable pause_var      : std_logic;
69.	   variable bits           : std_logic_vector(1 downto 0);
70.	begin
71.	   byte_sel_var := "0000";
72.	   pause_var := '0';
73.	   data_read_var := ZERO;
74.	   data_write_var := ZERO;
75.	   mem_state_next := mem_state_reg;
76.	   opcode_next := opcode_reg;
77.	
78.	   case mem_source is
79.	   when MEM_READ32 =>
80.	      data_read_var := mem_data_r;
81.	
82.	   when MEM_READ16 | MEM_READ16S =>
83.	      if address_in(1) = ENDIAN_MODE(1) then
84.	         data_read_var(15 downto 0) := mem_data_r(31 downto 16);
85.	      else
86.	         data_read_var(15 downto 0) := mem_data_r(15 downto 0);
87.	      end if;
88.	      if mem_source = MEM_READ16 or data_read_var(15) = '0' then
89.	         data_read_var(31 downto 16) := ZERO(31 downto 16);
90.	      else
91.	         data_read_var(31 downto 16) := ONES(31 downto 16);
92.	      end if;
93.	
94.	   when MEM_READ8 | MEM_READ8S =>
95.	      bits := address_in(1 downto 0) xor ENDIAN_MODE;
96.	      case bits is
97.	      when "00" => data_read_var(7 downto 0) := mem_data_r(31 downto 24);
98.	      when "01" => data_read_var(7 downto 0) := mem_data_r(23 downto 16);
99.	      when "10" => data_read_var(7 downto 0) := mem_data_r(15 downto 8);
100.	      when others => data_read_var(7 downto 0) := mem_data_r(7 downto 0);
101.	      end case;
102.	      if mem_source = MEM_READ8 or data_read_var(7) = '0' then
103.	         data_read_var(31 downto 8) := ZERO(31 downto 8);
104.	      else
105.	         data_read_var(31 downto 8) := ONES(31 downto 8);
106.	      end if;
107.	
108.	   when MEM_WRITE32 =>
109.	      data_write_var := data_write;
110.	      byte_sel_var := "1111";
111.	
112.	   when MEM_WRITE16 =>
113.	      data_write_var := data_write(15 downto 0) & data_write(15 downto 0);
114.	      if address_in(1) = ENDIAN_MODE(1) then
115.	         byte_sel_var := "1100";
116.	      else
117.	         byte_sel_var := "0011";
118.	      end if;
119.	
120.	   when MEM_WRITE8 =>
121.	      data_write_var := data_write(7 downto 0) & data_write(7 downto 0) &
122.	                  data_write(7 downto 0) & data_write(7 downto 0);
123.	      bits := address_in(1 downto 0) xor ENDIAN_MODE;
124.	      case bits is
125.	      when "00" =>
126.	         byte_sel_var := "1000"; 
127.	      when "01" => 
128.	         byte_sel_var := "0100"; 
129.	      when "10" =>
130.	         byte_sel_var := "0010"; 
131.	      when others =>
132.	         byte_sel_var := "0001"; 
133.	      end case;
134.	
135.	   when others =>
136.	   end case;
137.	
138.	   if mem_source = MEM_FETCH then --opcode fetch
139.	      address_var := address_pc;
140.	      opcode_next := mem_data_r;
141.	      mem_state_next := STATE_ADDR;
142.	   else
143.	      if mem_state_reg = STATE_ADDR then
144.	         if pause_in = '0' then
145.	            address_var := address_in(31 downto 2);
146.	            mem_state_next := STATE_ACCESS;
147.	            pause_var := '1';
148.	         else
149.	            address_var := address_pc;
150.	            byte_sel_var := "0000";
151.	         end if;
152.	      else  --STATE_ACCESS
153.	         if pause_in = '0' then
154.	            address_var := address_pc;
155.	            opcode_next := next_opcode_reg;
156.	            mem_state_next := STATE_ADDR;
157.	            byte_sel_var := "0000";
158.	         else
159.	            address_var := address_in(31 downto 2);
160.	            byte_sel_var := "0000";
161.	         end if;
162.	      end if;
163.	   end if;
164.	
165.	   if nullify_op = '1' and pause_in = '0' then
166.	      opcode_next := ZERO;  --NOP after beql
167.	   end if;
168.	
169.	   if reset_in = '1' then
170.	      mem_state_reg <= STATE_ADDR;
171.	      opcode_reg <= ZERO;
172.	      next_opcode_reg <= ZERO;
173.	   elsif rising_edge(clk) then
174.	      if pause_in = '0' then
175.	         mem_state_reg <= mem_state_next;
176.	         opcode_reg <= opcode_next;
177.	         if mem_state_reg = STATE_ADDR then
178.	            next_opcode_reg <= mem_data_r;
179.	         end if;
180.	      end if;
181.	   end if;
182.	
183.	   mem_address <= address_var;
184.	   opcode_out <= opcode_reg;
185.	   data_read <= data_read_var;
186.	   pause_out <= pause_var;
187.	   mem_data_w <= data_write_var;
188.	   mem_byte_we <= byte_sel_var;
189.	
190.	end process; --data_proc
191.	
192.	end; --architecture logic
